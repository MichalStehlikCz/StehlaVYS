/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.provys.provysdb.api;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

/**
 *
 * @author micha
 */
public interface ProvysStatement extends Statement {

    void addBatch(String sql) throws SQLException;

    void cancel() throws SQLException;

    void clearBatch() throws SQLException;

    void clearWarnings() throws SQLException;

    void close() throws SQLException;

    void closeOnCompletion() throws SQLException;

    boolean execute(String sql) throws SQLException;

    boolean execute(String sql, int autoGeneratedKeys) throws SQLException;

    boolean execute(String sql, int[] columnIndexes) throws SQLException;

    boolean execute(String sql, String[] columnNames) throws SQLException;

    int[] executeBatch() throws SQLException;

    long[] executeLargeBatch() throws SQLException;

    long executeLargeUpdate(String sql) throws SQLException;

    long executeLargeUpdate(String sql, int autoGeneratedKeys) throws SQLException;

    long executeLargeUpdate(String sql, int[] columnIndexes) throws SQLException;

    long executeLargeUpdate(String sql, String[] columnNames) throws SQLException;

    ResultSet executeQuery(String sql) throws SQLException;

    int executeUpdate(String sql) throws SQLException;

    int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException;

    int executeUpdate(String sql, int[] columnIndexes) throws SQLException;

    int executeUpdate(String sql, String[] columnNames) throws SQLException;

    Connection getConnection() throws SQLException;

    int getFetchDirection() throws SQLException;

    int getFetchSize() throws SQLException;

    ResultSet getGeneratedKeys() throws SQLException;

    long getLargeMaxRows() throws SQLException;

    long getLargeUpdateCount() throws SQLException;

    int getMaxFieldSize() throws SQLException;

    int getMaxRows() throws SQLException;

    boolean getMoreResults() throws SQLException;

    boolean getMoreResults(int current) throws SQLException;

    int getQueryTimeout() throws SQLException;

    ResultSet getResultSet() throws SQLException;

    int getResultSetConcurrency() throws SQLException;

    int getResultSetHoldability() throws SQLException;

    int getResultSetType() throws SQLException;

    int getUpdateCount() throws SQLException;

    SQLWarning getWarnings() throws SQLException;

    boolean isCloseOnCompletion() throws SQLException;

    boolean isClosed() throws SQLException;

    boolean isPoolable() throws SQLException;

    boolean isWrapperFor(Class<?> iface) throws SQLException;

    void setCursorName(String name) throws SQLException;

    void setEscapeProcessing(boolean enable) throws SQLException;

    void setFetchDirection(int direction) throws SQLException;

    void setFetchSize(int rows) throws SQLException;

    void setLargeMaxRows(long max) throws SQLException;

    void setMaxFieldSize(int max) throws SQLException;

    void setMaxRows(int max) throws SQLException;

    void setPoolable(boolean poolable) throws SQLException;

    void setQueryTimeout(int seconds) throws SQLException;

    <T> T unwrap(Class<T> iface) throws SQLException;
    
}
